/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Role Handlers
 #	author : miyako
 #	2015/09/25
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Role Handlers

		case 1 :
			Get_default_application(pResult, pParams);
			break;

		case 2 :
			Set_default_application(pResult, pParams);
			break;

		case 3 :
			Get_capable_applications(pResult, pParams);
			break;

	}
}

// --------------------------------- Role Handlers --------------------------------

NSString * __CopyUTIForExtensionOrMIME(NSString *extensionOrMIME){
    NSString *uti = NULL;
    if(extensionOrMIME){
        uti = (NSString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassMIMEType, (CFStringRef)extensionOrMIME, NULL);
        uti = uti ? uti : @"";
        if([uti hasPrefix:@"dyn."]){
            [uti release];
            if([[extensionOrMIME lowercaseString]isEqualToString:@"key"]){
                uti = @"com.apple.iwork.keynote.sffkey";
            }else if([[extensionOrMIME lowercaseString]isEqualToString:@"pages"]){
                uti = @"com.apple.iwork.pages.sffpages";
            }else if([[extensionOrMIME lowercaseString]isEqualToString:@"numbers"]){
                uti = @"com.apple.iwork.numbers.sffnumbers";
            }else{
                uti = (NSString *)UTTypeCreatePreferredIdentifierForTag(kUTTagClassFilenameExtension, (CFStringRef)extensionOrMIME, NULL);
            }
        }
    }
    return uti ? uti : @"";
}

NSString * __CopyApplicationURLForBundleIdentifier(NSString *bundleId){
    NSString *path = NULL;
    CFURLRef url = NULL;
    if(bundleId){
        OSStatus err = LSFindApplicationForInfo(kLSUnknownCreator, (CFStringRef)bundleId, NULL, NULL, &url);
        if(!err){
            if(url){
                path = (NSString *)CFURLCopyFileSystemPath(url, kCFURLHFSPathStyle);
                CFRelease(url);
            }
        }
    }
    return path ? path : @"";
}

void Get_default_application(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_TEXT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

    NSString *inURLSchemeOrContentType = Param1.copyUTF16String();
    NSString *bundleId;

    bundleId = (NSString *)LSCopyDefaultRoleHandlerForContentType((CFStringRef)inURLSchemeOrContentType, kLSRolesAll);
    
    if(!bundleId){
        bundleId = (NSString *)LSCopyDefaultHandlerForURLScheme((CFStringRef)inURLSchemeOrContentType);
    }
	
    if(!bundleId){
        NSString *uti = __CopyUTIForExtensionOrMIME(inURLSchemeOrContentType);
        bundleId = (NSString *)LSCopyDefaultRoleHandlerForContentType((CFStringRef)uti, kLSRolesAll);
        [uti release];
    }
    
    if(bundleId){
        NSString *path = __CopyApplicationURLForBundleIdentifier(bundleId);
        Param2.setUTF16String(bundleId);
        Param3.setUTF16String(path);
        [bundleId release];
        [path release];
    }
    else{
        returnValue.setIntValue(-1);
    }
    
    [inURLSchemeOrContentType release];

	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

void Set_default_application(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

    NSString *inURLSchemeOrContentType = Param1.copyUTF16String();
    NSString *inHandlerBundleID = Param2.copyUTF16String();

    OSStatus err = LSSetDefaultHandlerForURLScheme((CFStringRef)inURLSchemeOrContentType, (CFStringRef)inHandlerBundleID);
    
    if(err){
        err = LSSetDefaultRoleHandlerForContentType((CFStringRef)inURLSchemeOrContentType, kLSRolesAll, (CFStringRef)inHandlerBundleID);
    }

    if(err){
        NSString *uti = __CopyUTIForExtensionOrMIME(inURLSchemeOrContentType);
        err = LSSetDefaultRoleHandlerForContentType((CFStringRef)uti, kLSRolesAll, (CFStringRef)inHandlerBundleID);
        [uti release];
    }

    if(err){
        returnValue.setIntValue(-1);
    }

    [inURLSchemeOrContentType release];
    
	returnValue.setReturn(pResult);
}

void Get_capable_applications(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	ARRAY_TEXT Param2;
	ARRAY_TEXT Param3;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

    NSString *inURLSchemeOrContentType = Param1.copyUTF16String();
    
    NSArray *bundleIds = (NSArray *)LSCopyAllRoleHandlersForContentType((CFStringRef)inURLSchemeOrContentType, kLSRolesAll);

    if(!bundleIds){
        bundleIds = (NSArray *)LSCopyAllHandlersForURLScheme((CFStringRef)inURLSchemeOrContentType);
    }

    if(!bundleIds){
        NSString *uti = __CopyUTIForExtensionOrMIME(inURLSchemeOrContentType);
        bundleIds = (NSArray *)LSCopyAllRoleHandlersForContentType((CFStringRef)uti, kLSRolesAll);
        [uti release];
    }
    
    if(bundleIds){
        Param2.setSize(1);
        Param3.setSize(1);
        for(NSUInteger i = 0; i < [bundleIds count]; ++i){
            NSString *bundleId = [bundleIds objectAtIndex:i];
            NSString *path = __CopyApplicationURLForBundleIdentifier(bundleId);
            Param2.appendUTF16String(bundleId);
            Param3.appendUTF16String(path);
            [path release];
        }
        [bundleIds release];
    }
    else{
        returnValue.setIntValue(-1);
    }

    [inURLSchemeOrContentType release];

	Param2.toParamAtIndex(pParams, 2);
	Param3.toParamAtIndex(pParams, 3);
	returnValue.setReturn(pResult);
}

